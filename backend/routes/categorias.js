import express from "express";
import { body, validationResult } from "express-validator";
import supabase from "../supabaseClient.js";
import { verificarToken } from "../middleware/authMiddleware.js";

const router = express.Router();

const validarCampos = (req, res, next) => {
  const errores = validationResult(req);
  if (!errores.isEmpty()) {
    return res.status(400).json({ errores: errores.array() });
  }
  next();
};

router.post(
  "/",
  [
    verificarToken,
    body("nombre").notEmpty().withMessage("El nombre es obligatorio").trim(),
  ],
  validarCampos,
  async (req, res) => {
    try {
      console.log("‚úÖ Datos recibidos en POST /categorias:", req.body);

      const { nombre } = req.body;
      const userId = req.usuario.id; 

      console.log("üîç Verificando si la categor√≠a ya existe...");
      const { data: categoriaExistente, error: errorExistente } = await supabase
        .from("categorias")
        .select("id")
        .eq("nombre", nombre)
        .eq("user_id", userId) 
        .single();

      if (categoriaExistente) {
        return res.status(400).json({ error: "‚ö†Ô∏è La categor√≠a ya existe." });
      }

      console.log("üÜï Insertando nueva categor√≠a...");
      const { data: nuevaCategoria, error: errorInsert } = await supabase
        .from("categorias")
        .insert([{ nombre, user_id: userId }]) 
        .select("id, nombre, user_id")
        .single();

      if (errorInsert) {
        console.error("‚ùå Error al crear categor√≠a:", errorInsert);
        return res
          .status(500)
          .json({ error: "‚ö†Ô∏è Error al crear la categor√≠a." });
      }

      res.status(201).json({
        mensaje: `‚úÖ Categor√≠a "${nombre}" creada con √©xito.`,
        categoria: nuevaCategoria,
      });
    } catch (error) {
      console.error("‚ùå Error interno al crear la categor√≠a:", error);
      res.status(500).json({ error: "‚ö†Ô∏è Error interno del servidor." });
    }
  }
);

router.get("/", verificarToken, async (req, res) => {
  try {
    const userId = req.usuario.id;
    const userRole = req.usuario.rol; 

    let query = supabase.from("categorias").select("id, nombre, user_id");

    if (userRole !== "admin") {
      query = query.eq("user_id", userId); 
    }

    const { data, error } = await query;

    if (error) throw error;

    res.json(data);
  } catch (error) {
    console.error("‚ùå Error al obtener categor√≠as:", error);
    res.status(500).json({ error: "Error al obtener las categor√≠as" });
  }
});


router.put("/:id", verificarToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { nombre } = req.body;

    const { data: categoria, error: errorBuscar } = await supabase
      .from("categorias")
      .select("*")
      .eq("id", id)
      .single();

    if (!categoria) {
      return res.status(404).json({ error: "Categor√≠a no encontrada" });
    }

    if (errorBuscar) {
      console.error("‚ùå Error al buscar la categor√≠a:", errorBuscar);
      return res.status(500).json({ error: "Error al buscar la categor√≠a" });
    }

    const { error: errorActualizar } = await supabase
      .from("categorias")
      .update({ nombre })
      .eq("id", id);

    if (errorActualizar) {
      console.error("‚ùå Error al actualizar categor√≠a:", errorActualizar);
      return res
        .status(500)
        .json({ error: "Error al actualizar la categor√≠a" });
    }

    res
      .status(200)
      .json({ mensaje: `Categor√≠a "${nombre}" actualizada correctamente` });
  } catch (error) {
    console.error("‚ùå Error al actualizar la categor√≠a:", error);
    res.status(500).json({ error: "Error interno del servidor" });
  }
});

router.delete("/", verificarToken, async (req, res) => {
  try {
    const { categoriaIds } = req.body; // üì• Recibir los IDs en el body

    if (!categoriaIds || categoriaIds.length === 0) {
      return res
        .status(400)
        .json({ error: "No se enviaron categor√≠as para eliminar." });
    }

    const { data: categoriasExistentes, error: errorBuscar } = await supabase
      .from("categorias")
      .select("id")
      .in("id", categoriaIds);

    if (errorBuscar) throw errorBuscar;

    if (!categoriasExistentes || categoriasExistentes.length === 0) {
      return res
        .status(404)
        .json({ error: "Las categor√≠as seleccionadas no existen." });
    }

    const { error } = await supabase
      .from("categorias")
      .delete()
      .in("id", categoriaIds);

    if (error) throw error;

    res.status(200).json({
      mensaje: `‚úÖ ${categoriaIds.length} categor√≠as eliminadas correctamente.`,
    });
  } catch (error) {
    console.error("‚ùå Error al eliminar categor√≠as:", error);
    res.status(500).json({ error: "Error al eliminar las categor√≠as." });
  }
});

export default router;
